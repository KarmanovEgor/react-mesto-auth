{"ast":null,"code":"class Api {\n  constructor(options) {\n    this._url = options.baseUrl;\n    this._headers = options.headers;\n    this._authorization = options.headers.authorization;\n  }\n  _checkResponse(res) {\n    res.ok ? res.json() : Promise.reject();\n  }\n  // получаем инфу о пользователе\n  getInfo() {\n    return fetch(`${this._url}/users/me`, {\n      headers: {\n        authorization: this._authorization\n      }\n    }).then(this._checkResponse);\n    /* Возвращаем Promise, с информацией о пользователе. Если запрос не удался, Promise отклоняется.\n     */\n  }\n\n  // отправляем GET-запрос на сервер для получения списка карточек.\n  // Возвращаем Promise, со списком карточек. Если запрос не удался, Promise отклоняется.\n  getCards() {\n    return fetch(`${this._url}/cards`, {\n      headers: {\n        authorization: this._authorization\n      }\n    }).then(res => res.ok ? res.json() : Promise.reject());\n  }\n\n  // отправляем PATCH-запрос на сервер для обновления информации о пользователе.\n  //  Возвращаем Promise,с обновленной информацией о пользователе. Если запрос не удался, Promise отклоняется.\n  setUserInfo(data) {\n    return fetch(`${this._url}/users/me`, {\n      method: \"PATCH\",\n      headers: this._headers,\n      body: JSON.stringify({\n        name: data.profilename,\n        about: data.job\n      })\n    }).then(res => res.ok ? res.json() : Promise.reject());\n  }\n\n  // отправляем PATCH-запрос на сервер для обновления аватара пользователя.\n  setUserAva(data) {\n    return fetch(`${this._url}/users/me/avatar`, {\n      method: \"PATCH\",\n      headers: this._headers,\n      body: JSON.stringify({\n        avatar: data.avatar\n      })\n    }).then(res => res.ok ? res.json() : Promise.reject());\n  }\n\n  // отправляем POST-запрос на сервер для добавления новой карточки.\n  // Принимаем объект data, содержащий данные новой карточки: ссылку на изображение и название.\n  // Возвращаем Promise, с информацией о новой карточке. Если запрос не удался, Promise отклоняется.\n  addCard(data) {\n    return fetch(`${this._url}/cards`, {\n      method: \"POST\",\n      headers: this._headers,\n      body: JSON.stringify({\n        name: data.title,\n        link: data.link\n      })\n    }).then(res => res.ok ? res.json() : Promise.reject());\n  }\n\n  // отправляем PUT-запрос на сервер для добавления лайка карточке.\n  // Принимаем идентификатор карточки cardId. Возвращаем Promise,\n  addLike(cardId) {\n    return fetch(`${this._url}/cards/${cardId}/likes`, {\n      method: \"PUT\",\n      headers: {\n        authorization: this._authorization\n      }\n    }).then(res => res.ok ? res.json() : Promise.reject());\n  }\n  deleteLike(cardId) {\n    return fetch(`${this._url}/cards/${cardId}/likes`, {\n      method: \"DELETE\",\n      headers: {\n        authorization: this._authorization\n      }\n    }).then(res => res.ok ? res.json() : Promise.reject());\n  }\n  deleteCard(cardId) {\n    return fetch(`${this._url}/cards/${cardId}`, {\n      method: \"DELETE\",\n      headers: {\n        authorization: this._authorization\n      }\n    }).then(res => res.ok ? res.json() : Promise.reject());\n  }\n}\nconst api = new Api({\n  baseUrl: \"https://mesto.nomoreparties.co/v1/cohort-66\",\n  headers: {\n    authorization: \"9a95746f-f7b1-457c-ba4e-3c32c962e5ea\",\n    \"Content-Type\": \"application/json\"\n  }\n});\nexport default api;","map":{"version":3,"names":["Api","constructor","options","_url","baseUrl","_headers","headers","_authorization","authorization","_checkResponse","res","ok","json","Promise","reject","getInfo","fetch","then","getCards","setUserInfo","data","method","body","JSON","stringify","name","profilename","about","job","setUserAva","avatar","addCard","title","link","addLike","cardId","deleteLike","deleteCard","api"],"sources":["/Users/egorkarmanov/Desktop/yandex/mestoreact/mesto-react/src/utils/api.js"],"sourcesContent":["class Api {\n  constructor(options) {\n    this._url = options.baseUrl;\n    this._headers = options.headers;\n    this._authorization = options.headers.authorization;\n  }\n  _checkResponse(res) {\n    res.ok ? res.json() : Promise.reject()\n}\n  // получаем инфу о пользователе\n  getInfo() {\n    return fetch(`${this._url}/users/me`, {\n      headers: {\n        authorization: this._authorization,\n      },\n    }).then(this._checkResponse);\n    /* Возвращаем Promise, с информацией о пользователе. Если запрос не удался, Promise отклоняется.\n     */\n  }\n\n  // отправляем GET-запрос на сервер для получения списка карточек.\n  // Возвращаем Promise, со списком карточек. Если запрос не удался, Promise отклоняется.\n  getCards() {\n    return fetch(`${this._url}/cards`, {\n      headers: {\n        authorization: this._authorization,\n      },\n    }).then((res) => (res.ok ? res.json() : Promise.reject()));\n  }\n\n  // отправляем PATCH-запрос на сервер для обновления информации о пользователе.\n  //  Возвращаем Promise,с обновленной информацией о пользователе. Если запрос не удался, Promise отклоняется.\n  setUserInfo(data) {\n    return fetch(`${this._url}/users/me`, {\n      method: \"PATCH\",\n      headers: this._headers,\n      body: JSON.stringify({\n        name: data.profilename,\n        about: data.job,\n      }),\n    }).then((res) => (res.ok ? res.json() : Promise.reject()));\n  }\n\n  // отправляем PATCH-запрос на сервер для обновления аватара пользователя.\n  setUserAva(data) {\n    return fetch(`${this._url}/users/me/avatar`, {\n      method: \"PATCH\",\n      headers: this._headers,\n      body: JSON.stringify({\n        avatar: data.avatar,\n      }),\n    }).then((res) => (res.ok ? res.json() : Promise.reject()));\n  }\n\n  // отправляем POST-запрос на сервер для добавления новой карточки.\n  // Принимаем объект data, содержащий данные новой карточки: ссылку на изображение и название.\n  // Возвращаем Promise, с информацией о новой карточке. Если запрос не удался, Promise отклоняется.\n  addCard(data) {\n    return fetch(`${this._url}/cards`, {\n      method: \"POST\",\n      headers: this._headers,\n      body: JSON.stringify({\n        name: data.title,\n        link: data.link,\n      }),\n    }).then((res) => (res.ok ? res.json() : Promise.reject()));\n  }\n\n  // отправляем PUT-запрос на сервер для добавления лайка карточке.\n  // Принимаем идентификатор карточки cardId. Возвращаем Promise,\n  addLike(cardId) {\n    return fetch(`${this._url}/cards/${cardId}/likes`, {\n      method: \"PUT\",\n      headers: {\n        authorization: this._authorization,\n      },\n    }).then((res) => (res.ok ? res.json() : Promise.reject()));\n  }\n\n  deleteLike(cardId) {\n    return fetch(`${this._url}/cards/${cardId}/likes`, {\n      method: \"DELETE\",\n      headers: {\n        authorization: this._authorization,\n      },\n    }).then((res) => (res.ok ? res.json() : Promise.reject()));\n  }\n  deleteCard(cardId) {\n    return fetch(`${this._url}/cards/${cardId}`, {\n      method: \"DELETE\",\n      headers: {\n        authorization: this._authorization,\n      },\n    }).then((res) => (res.ok ? res.json() : Promise.reject()));\n  }\n}\nconst api = new Api({\n  baseUrl: \"https://mesto.nomoreparties.co/v1/cohort-66\",\n  headers: {\n    authorization: \"9a95746f-f7b1-457c-ba4e-3c32c962e5ea\",\n    \"Content-Type\": \"application/json\",\n  },\n});\nexport default api;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}